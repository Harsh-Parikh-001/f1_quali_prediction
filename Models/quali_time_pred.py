# -*- coding: utf-8 -*-
"""ML for Q1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z91ixup5KE9zVtGg_J-4xW1a0gJDdhMi
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

df = pd.read_csv('file_Q1.csv')

X = df.iloc[:, :-1]
y = df.iloc[:, -1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

xgb = XGBRegressor(objective = 'reg:squarederror')
params = {
    'n_estimators': [450],
    'max_depth': [25],
    'learning_rate': [0.01],
    'subsample': [0.9],
    'colsample_bytree': [0.9]
}

grid = GridSearchCV(xgb, params, cv = 5, scoring='neg_mean_absolute_error')
grid.fit(X_train, y_train)

best_model = grid.best_estimator_
y_pred = best_model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Tuned MAE:", mae)
print(f"Mean Squared Error: {mse:.3f}")
print(f"R² Score: {r2:.3f}")

df = pd.read_csv("file_Q3.csv")

X = df.iloc[:, :-1]
y = df.iloc[:, -1]

scaler_y = StandardScaler()
y_scaled = scaler_y.fit_transform(y.values.reshape(-1, 1)).ravel()

X_train, X_test, y_train, y_test = train_test_split(X, y_scaled, test_size=0.2, random_state=42)

svm_model = SVR(kernel='rbf', C=10, gamma='scale')
svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("MAE:", mae)
print(f"Mean Squared Error: {mse:.3f}")
print(f"R² Score: {r2:.3f}")

# Load the dataset
df = pd.read_csv("file_Q3.csv")

# Split into features and target
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

scaler_y = StandardScaler()
y_scaled = scaler_y.fit_transform(y.values.reshape(-1, 1)).ravel()

X_train, X_test, y_train, y_test = train_test_split(X, y_scaled, test_size=0.2, random_state=42)

svm_model = SVR(kernel='rbf', C=10, gamma='scale')
svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("MAE:", mae)
print(f"Mean Squared Error: {mse:.3f}")
print(f"R² Score: {r2:.3f}")

df_pred = pd.read_csv('file_quali_pred_Q3.csv')

predicted_scaled = best_model.predict(df_pred)
print(predicted_scaled)
predicted_q3_time = scaler_y.inverse_transform(predicted_scaled.reshape(-1, 1)).ravel()[0]

predicted_q3 = []

for i in predicted_scaled:
    predicted_q3.append(scaler_y.inverse_transform(i.reshape(-1, 1)).ravel()[0])

list_of_drivers = ['VER','HAM', 'LEC', 'NOR', 'PIA', 'RUS', 'TSU', 'ALB', 'GAS', 'SAI', 'HAD', 'ALO', 'STR' , 'DOO', 'BOR', 'ANT', 'HUL' , 'LAW', 'OCO', 'BEA']

driver_lap_dict = dict(zip(list_of_drivers, predicted_scaled))

sorted_driver_lap_dict = dict(sorted(driver_lap_dict.items(), key=lambda item: item[1]))

print("Grid:")
for driver, lap_time in sorted_driver_lap_dict.items():
    print(f"{driver}: {lap_time} seconds")

